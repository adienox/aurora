#+TITLE: Config
#+Description: Doom Emacs configuration file
#+Property: header-args :tangle config.el
#+Author: Adwait Adhikari

* Table of Content :toc:
- [[#avy][Avy]]
- [[#basic-configuration][Basic Configuration]]
  - [[#helpful-keybindings][Helpful Keybindings]]
  - [[#line-numbers][Line Numbers]]
  - [[#user-details][User Details]]
- [[#dired][Dired]]
  - [[#keybindings-to-open-dired][Keybindings to open Dired]]
  - [[#keybindings-withing-dired][Keybindings withing Dired]]
  - [[#peep-dired][Peep Dired]]
- [[#doom-theme][Doom Theme]]
- [[#elfeed][Elfeed]]
  - [[#keybindings][Keybindings]]
  - [[#elfeed-tube][Elfeed Tube]]
- [[#fonts][Fonts]]
- [[#org-mode][Org Mode]]
  - [[#appearance][Appearance]]
  - [[#general-configuration][General Configuration]]
  - [[#keybindings-1][Keybindings]]
  - [[#org-auto-tangle][Org Auto Tangle]]
- [[#rainbow-mode][Rainbow Mode]]

* Avy
[[https://github.com/abo-abo/avy][Avy]] is a GNU Emacs package for jumping to visible text using a char-based decision tree.

+ Using avy for all windows
#+begin_src emacs-lisp
(setq avy-all-windows t)
#+end_src

* Basic Configuration
** Helpful Keybindings
| Command                | Description                    | Binding |
|------------------------+--------------------------------+---------|
| beginning-of-line-text | Jumps to the beginning of text | H       |
| end-of-line            | Jumps to the end of line       | L       |
|------------------------+--------------------------------+---------|

#+begin_src emacs-lisp
(map! :nvm "H" #'beginning-of-line-text
      :nvm "L" #'end-of-line)
#+end_src
** Line Numbers
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** User Details
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp
(setq user-full-name "Adienox"
      user-mail-address "adwaitadk@pm.me")
#+end_src

* Dired
Dired is the file manager within Emacs. Doom Emacs does not use ‘SPC d’ for any of its keybindings, so I’ve chosen the format of ‘SPC d’ plus ‘key’.

** Keybindings to open Dired
| Command    | Description                  | Binding |
|------------+------------------------------+---------|
| dired      | Open dired file manager      | SPC d d |
| dired-jump | Jump to current dir in dired | SPC d j |
|------------+------------------------------+---------|

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump))
#+end_src

** Keybindings withing Dired
| Command            | Description                                 | Binding |
|--------------------+---------------------------------------------+---------|
| dired-up-directory | Go up in directory tree                     | h       |
| dired-find-file    | Go down in directory tree (or open if file) | l       |
| dired-view-file    | View file in dired                          | SPC d v |
| peep-dired         | View file in dired                          | SPC d p |
|--------------------+---------------------------------------------+---------|

#+begin_src emacs-lisp
(map! :leader
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file)
#+end_src

** Peep Dired
#+begin_src emacs-lisp
(setq peep-dired-cleanup-on-disable t)
#+end_src

* Doom Theme
Using custom catppuccin theme for doom emacs.
#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
#+end_src

* Elfeed
** Keybindings
| Command                  | Description          | Binding |
|--------------------------+----------------------+---------|
| elfeed                   | Open Elfeed          | SPC e e |
| elfeed-update            | Update all feeds     | SPC e u |
| elfeed-search-browse-url | Open feed in browser | SPC e b |
|--------------------------+----------------------+---------|

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("e" . "elfeed")
       :desc "Open Elfeed" "e" #'elfeed
       :desc "Update all feeds" "u" #'elfeed-update
       :desc "Open feed in browser" "b" #'elfeed-search-browse-url))

#+end_src

** Elfeed Tube
Elfeed Tube is an Emacs package for a richer, interactive, noise-free and fully text-capable interface to your Youtube subscriptions and playlists using Elfeed, the RSS feed reader for Emacs. Think of it as supercharging Elfeed, or perhaps a taste of what the RSS/Atom protocol could have become today if it had continue to evolve.
#+begin_src emacs-lisp
(use-package! elfeed-tube
  :after elfeed
  :demand t
  :config
  (setq elfeed-tube-auto-fetch-p t)
  (elfeed-tube-setup)
  :bind (:map elfeed-show-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)
         :map elfeed-search-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)))
#+end_src

*** Elfeed Tube mpv
Control mpv from withing emacs. Integrates follow mode with elfeed tube.
#+begin_src emacs-lisp
(use-package! elfeed-tube-mpv
  :bind (:map elfeed-show-mode-map
              ("C-c C-f" . elfeed-tube-mpv-follow-mode)
              ("C-c C-w" . elfeed-tube-mpv-where)))
#+end_src

* Fonts
Settings related to fonts within Doom Emacs:

+ ‘doom-font’ – standard monospace font that is used for most things in Emacs.
+ ‘doom-variable-pitch-font’ – variable font which is useful in some Emacs plugins.
+ ‘doom-big-font’ – used in doom-big-font-mode; useful for presentations.
+ ‘font-lock-comment-face’ – for comments.
+ ‘font-lock-keyword-face’ – for keywords with special significance like ‘setq’ in elisp.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "CaskaydiaCove NF" :size 16)
      doom-variable-pitch-font (font-spec :family "Readex Pro" :size 16)
      doom-big-font (font-spec :family "CaskaydiaCove NF" :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

* Org Mode
[[https://orgmode.org/][Org]] is a highly flexible structured plain text file format, composed of a few simple, yet versatile, structures — constructed to be both simple enough for the novice and powerful enough for the expert.

** Appearance
Changing the default appearance of org bullets
#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
      org-sueprstar-headline-itembullet '((?- . ?✦))) ; changes +/- symbols in item lists
#+end_src

** General Configuration
Setting the default org directory
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/")
#+end_src

** Keybindings

#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
#+end_src
** Org Auto Tangle
Automatic org tangle on save
#+begin_src emacs-lisp
(use-package! org-auto-tangle
:defer t
:hook (org-mode . org-auto-tangle-mode)
:config
(setq org-auto-tangle-default t))
#+end_src

* Rainbow Mode
Rainbox mode displays the actual color for any hex value color. Rainbow mode is enabled everywhere. (exception: org-agenda-mode since rainbow-mode destroys all highlighting in org-agenda).
#+begin_src emacs-lisp
;; (define-globalized-minor-mode global-rainbow-mode rainbow-mode
;;   (lambda ()
;;     (when (not (memq major-mode
;;                 (list 'org-agenda-mode)))
;;      (rainbow-mode 1))))
;; (global-rainbow-mode 1 )
#+end_src
