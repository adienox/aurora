#+title: NixOS Config
#+Description: NixOS configuration file
#+Property: header-args :tangle configuration.nix
#+Author: Adwait Adhikari

* Table of Contents :toc:
- [[#setting-up-imports][Setting up Imports]]
- [[#bootloader-grub][Bootloader (Grub)]]
- [[#environment-variables][Environment Variables]]
- [[#fonts][Fonts]]
- [[#bluetooth][Bluetooth]]
- [[#locale-and-timezone][Locale and Timezone]]
- [[#networking][Networking]]
  - [[#firewall][Firewall]]
  - [[#proxy][Proxy]]
- [[#x11-keymap][X11 Keymap]]
- [[#user-setup][User Setup]]
- [[#nvidia][Nvidia]]
- [[#packages][Packages]]
  - [[#allow-unfree-packages][Allow unfree packages]]
  - [[#system-packages][System Packages]]
  - [[#android][Android]]
  - [[#discord][Discord]]
  - [[#gnupg][Gnupg]]
  - [[#hyprland][Hyprland]]
  - [[#zsh][Zsh]]
- [[#security][Security]]
- [[#services][Services]]
- [[#pipewire][Pipewire]]
- [[#power-management][Power Management]]
- [[#nix-options-flakes-garbage-collect][Nix Options (flakes, garbage-collect)]]
- [[#system-auto-upgrade-channel][System (auto-upgrade, channel)]]

* Setting up Imports
#+begin_src nix
{ config,lib, pkgs, ... }:
{
  imports =
    [
      ./hardware-configuration.nix
    ];
#+end_src

* Bootloader (Grub)
#+begin_src nix
  boot = {
    loader = {
      efi.canTouchEfiVariables = true;
      timeout = 3;
      grub = {
        enable = true;
        devices = ["nodev"];
        useOSProber = false;
        efiSupport = true;
        configurationLimit = 5;
      };
    };
  };
#+end_src

* Environment Variables
#+begin_src nix
  environment.variables = {
      QT_QPA_PLATFORMTHEME = "qt5ct";
      QT_QPA_PLATFORM = "xcb obs";
      #https://unix.stackexchange.com/a/657578
      LIBSEAT_BACKEND = "logind";
  };
#+end_src

* Fonts
Using [[https://github.com/samuelngs/apple-emoji-linux][Apple Color Emoji]] as the default emoji font. Download and place it in ~$HOME/.local/share/fonts~
#+begin_src nix
  fonts = {
    fontDir.enable = true;
    fonts = with pkgs; [
      nerdfonts
      font-awesome
      google-fonts
      source-han-sans
    ];
    fontconfig.defaultFonts.emoji = [ "Apple Color Emoji" ];
  };
#+end_src

* Bluetooth
#+begin_src nix
  hardware.bluetooth = {
      enable = true;
      settings.General.Experimental = true;
    };
  services.blueman.enable = true;
#+end_src

* Locale and Timezone
Setting time zone and internationalisation properties.
#+begin_src nix
  time.timeZone = "Asia/Kathmandu";
  i18n.defaultLocale = "en_US.UTF-8";
#+end_src

* Networking
Enable networking
#+begin_src nix
  networking = {
    hostName = "anomaly";
    nameservers = ["1.1.1.1"];
    networkmanager.enable = true;
    networkmanager.insertNameservers = ["1.1.1.1"];
  };
#+end_src

** Firewall
#+begin_src nix
  # Open ports in the firewall.
  # Or disable the firewall altogether.
  networking.firewall = {
    enable = true;
    allowedTCPPorts = [ 22000 ];
    allowedUDPPorts = [ ];
    allowedTCPPortRanges = [ {from = 1714; to = 1764;} ]; # Needed for KDE connect
    allowedUDPPortRanges = [ {from = 1714; to = 1764;} ]; # Needed for KDE connect
  };
#+end_src

** Proxy
#+begin_src nix
  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
#+end_src

* X11 Keymap
#+begin_src nix
  services.xserver = {
    layout = "us";
    xkbVariant = "";
  };
#+end_src

* User Setup
#+begin_src nix
  users.users.nox = {
    isNormalUser = true;
    description = "adienox";
    shell = pkgs.zsh;
    extraGroups = [ "networkmanager" "wheel" "video" "audio" "adbusers" "input" ];
    packages = with pkgs; [];
  };
#+end_src

* Nvidia
#+begin_src nix
  # Make sure opengl is enabled
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
  };
  # Tell Xorg to use the nvidia driver
  services.xserver.videoDrivers = ["nvidia"];

  hardware.nvidia = {
    # Modesetting is needed for most wayland compositors
    modesetting.enable = true;

    # Use the open source version of the kernel module
    # Only available on driver 515.43.04+
    open = true;

    # Enable the nvidia settings menu
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };
#+end_src

* Packages
** Allow unfree packages
#+begin_src nix
  nixpkgs.config.allowUnfree = true;
#+end_src

** System Packages
List of packages installed in system profile
#+begin_src nix
  environment.systemPackages = with pkgs; [
    iw
    killall
    wget
    git
    gnome.gnome-keyring
    seatd
    xdg-utils
    auto-cpufreq
    pciutils
    usbutils
    powertop
    libsForQt5.polkit-kde-agent
    python3Full
    gnome.nautilus
    discord
  ];
#+end_src

** Android
#+begin_src nix
  programs.adb.enable = true;
# Enable adbusers in extragroups for user
#+end_src

** Discord
#+begin_src nix
  nixpkgs.overlays = [
    (final: prev: {
      discord = prev.discord.override {
        withOpenASAR = true;
        withVencord = true;
      };
    })
  ];
#+end_src

** Gnupg
#+begin_src nix
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };
#+end_src

** Hyprland
#+begin_src nix
  programs.hyprland = {
    enable = true;
    xwayland = {
      hidpi = true;
      enable = true;
    };
  };
#+end_src

** Zsh
#+begin_src nix
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    enableBashCompletion = true;
  };
  environment.shells = with pkgs; [ zsh ];
#+end_src

* Security
#+begin_src nix
  security = {
    polkit.enable = true;
    pam.services.swaylock = {
        text = ''
        auth include login
        '';
    };
  };
#+end_src

* Services
#+begin_src nix
  services = {
    gnome.gnome-keyring.enable = true;
    dbus.enable = true;
    auto-cpufreq.enable = true;
    openssh.enable = true;
    udisks2.enable = true;
    gvfs.enable = true; # Nautilus Trash
    gnome.sushi.enable = true; # Nautilus file preview

    locate = {
      enable = true;
      locate = pkgs.mlocate;
      localuser = null;
    };
  };
  xdg.portal.enable = true;
#+end_src

* Pipewire
#+begin_src nix
  sound = {
    enable = true;
    mediaKeys.enable = true;
  };

  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    jack.enable = true;
  };
#+end_src

* Power Management
+ Disable Watchdogs [[https://wiki.archlinux.org/title/Improving_performance#Watchdogs][Blacklist SP5100]] [[https://wiki.archlinux.org/title/Power_management#Disabling_NMI_watchdog][NMI Watchdog]]
+ Enabling powersave on [[https://wiki.archlinux.org/title/Power_management#Network_interfaces][network interfaces]]
+ Enabling powersave on [[https://wiki.archlinux.org/title/Power_management#Intel_wireless_cards_(iwlwifi)][Iwlwifi]]
+ Enabling powersave on [[https://wiki.archlinux.org/title/Power_management#Audio][Audio]]
+ Enabling powersave on pci devices [[https://github.com/NixOS/nixpkgs/issues/211345#issuecomment-1397825573][Github Issue]]
+ Increasing virtual memory [[https://wiki.archlinux.org/title/Power_management#Writeback_Time][Writeback time]]
#+begin_src nix
  boot = {
      extraModprobeConfig =''
          options iwlwifi power_save=1
          options iwlmvm power_scheme=3
          options snd_hda_intel power_save=1
          blacklist sp5100_tco
      '';
      kernel.sysctl = {
      "kernel.nmi_watchdog" = 0;
      "vm.dirty_writeback_centisecs" = 1500;
      "vm.laptop_mode" = 5;
      };
  };
  services.udev.extraRules = ''
    ACTION=="add", SUBSYSTEM=="net", KERNEL=="wl*", RUN+="${pkgs.iw}/bin/iw dev $name set power_save on"
  '';
  systemd.tmpfiles.rules = map
          (e:
          "w /sys/bus/${e}/power/control - - - - auto"
          ) [
            "pci/devices/0000:00:00.0" # Root Complex
            "pci/devices/0000:00:00.2" # IOMMU
            "pci/devices/0000:00:01.0" # Renoir PCIe Dummy Host Bridge
            "pci/devices/0000:00:02.0" # Renoir PCIe Dummy Host Bridge
            "pci/devices/0000:00:08.0" # Renoir PCIe Dummy Host Bridge
            "pci/devices/0000:00:14.0" # FCH SMBus Controller
            "pci/devices/0000:00:14.3" # FCH LPC bridge
            "pci/devices/0000:00:18.0" # Renoir Function 0
            "pci/devices/0000:00:18.1" # Renoir Function 1
            "pci/devices/0000:00:18.2" # Renoir Function 2
            "pci/devices/0000:00:18.3" # Renoir Function 3
            "pci/devices/0000:00:18.4" # Renoir Function 4
            "pci/devices/0000:00:18.5" # Renoir Function 5
            "pci/devices/0000:00:18.6" # Renoir Function 6
            "pci/devices/0000:00:18.7" # Renoir Function 7
            "pci/devices/0000:01:00.0" # Nvidia GPU
            "pci/devices/0000:02:00.0" # Non-Volatile Memory Controller
            "pci/devices/0000:03:00.0" # Ethernet
            "pci/devices/0000:04:00.0" # Wifi
            "pci/devices/0000:05:00.0" # VGA controller
            "pci/devices/0000:05:00.2" # Encryption controller
            "pci/devices/0000:05:00.3" # Renoir/Cezanne USB 3.1
            "pci/devices/0000:05:00.5" # Audio co-processor
            "pci/devices/0000:05:00.6" # Audio controller
            "pci/devices/0000:06:00.0" # FCH SATA Controller [AHCI mode]
            "pci/devices/0000:06:00.1" # FCH SATA Controller [AHCI mode]
            "pci/devices/0000:06:00.0/ata1" # FCH SATA Controller [AHCI mode]
            "pci/devices/0000:06:00.1/ata2" # FCH SATA Controller [AHCI mode]
            "usb/devices/3-3" # USB device 3-3
            "usb/devices/3-4" # ITE device
          ];

  # systemd.tmpfiles.rules = map
  #         (e:
  #         "w /sys/class/scsi_host/${e}/link_power_management_policy - - - - med_power_with_dipm"
  #         ) [
  #           "host0" # Sata link power management Host0
  #           "host1" # Sata link power management Host1
  #         ];
#+end_src

* Nix Options (flakes, garbage-collect)
Enabling nix flakes and running garbage collection weekly
#+begin_src nix
  nix = {
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };
    package = pkgs.nixFlakes;
    extraOptions = "experimental-features = nix-command flakes";
  };
#+end_src

* System (auto-upgrade, channel)
This value determines the NixOS release from which the default settings for stateful data, like file locations and database versions on your system were taken. It‘s perfectly fine and recommended to leave this value at the release version of the first install of this system. Before changing this value read the documentation for this option (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).

#+begin_src nix
  system = {
    stateVersion = "23.05";
    autoUpgrade = {
      enable = true;
      channel  = "https://nixos.org/channels/nixos-unstable";
    };
  };
}
#+end_src
